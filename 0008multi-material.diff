diff -bNur 0007shared-ubo/data_bulk.c 0008multi-material/data_bulk.c
--- 0007shared-ubo/data_bulk.c	2019-03-02 20:06:22.821345727 -0600
+++ 0008multi-material/data_bulk.c	2019-03-02 20:06:22.825345914 -0600
@@ -1,4 +1,5 @@
 #include "data_bulk.h"
+#include <spirv/unified1/spirv.h>
 #include <stdint.h>
 
 typedef struct
@@ -267,12 +268,14 @@
         "Other Cube",
         offsetof(struct data_model_index, other_cube) / sizeof(uint32_t),
         sizeof(data_model_index->other_cube) / sizeof(uint32_t),
-        0,
+        1,
     },
 };
 
 mat4 *get_model_0(void *p) { return &((material_0_ubo_t *)p)->model; }
 
+mat4 *get_model_1(void *p) { return &((material_1_ubo_t *)p)->model; }
+
 #define DMTCLEAR                                                                      \
         {                                                                             \
                 {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, \
@@ -768,4 +771,2129 @@
                                  DMTCLEAR}}},
         sizeof(texture_0_t),
     },
+    {
+        "Other Example",
+        1,
+        sizeof(material_1_ubo_t),
+        get_model_1,
+        VK_FORMAT_R8G8B8A8_UNORM,
+        8 * 4,
+        8 * 3,
+        (void *)&(texture_0_t){{{DMTCLEAR,
+                                 {
+                                     {DMTCONE, 0, DMTCONE, 0xff},
+                                     {DMTCTWO, 0, DMTCONE, 0xff},
+                                     {DMTCTHR, 0, DMTCONE, 0xff},
+                                     {DMTCFOR, 0, DMTCONE, 0xff},
+                                     {0, DMTCFOR, DMTCONE, 0xff},
+                                     {0, DMTCTHR, DMTCONE, 0xff},
+                                     {0, DMTCTWO, DMTCONE, 0xff},
+                                     {0, DMTCONE, DMTCONE, 0xff},
+                                 },
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCTWO, 0, DMTCONE, 0xff},
+                                  {DMTCTHR, 0, DMTCONE, 0xff},
+                                  {DMTCFOR, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCFOR, DMTCONE, 0xff},
+                                  {0, DMTCTHR, DMTCONE, 0xff},
+                                  {0, DMTCTWO, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCTHR, 0, DMTCONE, 0xff},
+                                  {DMTCFOR, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCFOR, DMTCONE, 0xff},
+                                  {0, DMTCTHR, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCFOR, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCFOR, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCSEV, 0, DMTCONE, 0xff},
+                                  {DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff},
+                                  {0, DMTCSEV, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCSIX, 0, DMTCONE, 0xff},
+                                  {DMTCSEV, 0, DMTCONE, 0xff},
+                                  {DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff},
+                                  {0, DMTCSEV, DMTCONE, 0xff},
+                                  {0, DMTCSIX, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCFIV, 0, DMTCONE, 0xff},
+                                  {DMTCSIX, 0, DMTCONE, 0xff},
+                                  {DMTCSEV, 0, DMTCONE, 0xff},
+                                  {DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff},
+                                  {0, DMTCSEV, DMTCONE, 0xff},
+                                  {0, DMTCSIX, DMTCONE, 0xff},
+                                  {0, DMTCFIV, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR}},
+                               {{{{DMTCONE, DMTCONE, 0, 0xff},
+                                  {DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff},
+                                  {DMTCONE, 0, DMTCONE, 0xff}},
+                                 {{DMTCONE, DMTCONE, 0, 0xff},
+#if 1
+                                  {0xff, 0xff, 0xff, 0xff},
+#else
+                                  {DMTCTWO, DMTCONE, 0, 0xff},
+#endif
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff},
+                                  {0, DMTCONE, DMTCONE, 0xff}},
+                                 {{DMTCONE, DMTCONE, 0, 0xff},
+                                  {DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff},
+                                  {DMTCONE, 0, DMTCONE, 0xff}},
+                                 {{DMTCONE, DMTCONE, 0, 0xff},
+                                  {DMTCTWO, DMTCONE, 0, 0xff},
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff},
+                                  {0, DMTCONE, DMTCONE, 0xff}}},
+                                {{{DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff}},
+#if 1
+                                 {{0xff, 0xff, 0xff, 0xff},
+                                  {0xff, 0xff, 0xff, 0xff},
+#else
+                                 {{DMTCTWO, DMTCONE, 0, 0xff},
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+#endif
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff}},
+                                 {{DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff}},
+                                 {{DMTCTWO, DMTCONE, 0, 0xff},
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff}}},
+                                {{{DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff}},
+                                 {{DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff}},
+                                 {{DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff}},
+                                 {{DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff}}},
+                                {{{DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff}},
+                                 {{DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff}},
+                                 {{DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff}},
+                                 {{DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff}}},
+                                {{{DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff}},
+                                 {{DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff}},
+                                 {{DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff}},
+                                 {{DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff}}},
+                                {{{DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff}},
+                                 {{DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff}},
+                                 {{DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff}},
+                                 {{DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff}}},
+                                {{{DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff}},
+                                 {{DMTCTWO, DMTCONE, 0, 0xff},
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff}},
+                                 {{DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff}},
+                                 {{DMTCTWO, DMTCONE, 0, 0xff},
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff}}},
+                                {{{DMTCONE, DMTCONE, 0, 0xff},
+                                  {DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff},
+                                  {DMTCONE, 0, DMTCONE, 0xff}},
+                                 {{DMTCONE, DMTCONE, 0, 0xff},
+                                  {DMTCTWO, DMTCONE, 0, 0xff},
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff},
+                                  {0, DMTCONE, DMTCONE, 0xff}},
+                                 {{DMTCONE, DMTCONE, 0, 0xff},
+                                  {DMTCONE, DMTCTWO, 0, 0xff},
+                                  {DMTCONE, DMTCTHR, 0, 0xff},
+                                  {DMTCONE, DMTCFOR, 0, 0xff},
+                                  {DMTCONE, 0, DMTCFOR, 0xff},
+                                  {DMTCONE, 0, DMTCTHR, 0xff},
+                                  {DMTCONE, 0, DMTCTWO, 0xff},
+                                  {DMTCONE, 0, DMTCONE, 0xff}},
+                                 {{DMTCONE, DMTCONE, 0, 0xff},
+                                  {DMTCTWO, DMTCONE, 0, 0xff},
+                                  {DMTCTHR, DMTCONE, 0, 0xff},
+                                  {DMTCFOR, DMTCONE, 0, 0xff},
+                                  {0, DMTCONE, DMTCFOR, 0xff},
+                                  {0, DMTCONE, DMTCTHR, 0xff},
+                                  {0, DMTCONE, DMTCTWO, 0xff},
+                                  {0, DMTCONE, DMTCONE, 0xff}}}},
+                               {{DMTCLEAR,
+                                 {{DMTCONE, 0, DMTCONE, 0xff},
+                                  {DMTCTWO, 0, DMTCONE, 0xff},
+                                  {DMTCTHR, 0, DMTCONE, 0xff},
+                                  {DMTCFOR, 0, DMTCONE, 0xff},
+                                  {0, DMTCFOR, DMTCONE, 0xff},
+                                  {0, DMTCTHR, DMTCONE, 0xff},
+                                  {0, DMTCTWO, DMTCONE, 0xff},
+                                  {0, DMTCONE, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCTWO, 0, DMTCONE, 0xff},
+                                  {DMTCTHR, 0, DMTCONE, 0xff},
+                                  {DMTCFOR, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCFOR, DMTCONE, 0xff},
+                                  {0, DMTCTHR, DMTCONE, 0xff},
+                                  {0, DMTCTWO, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCTHR, 0, DMTCONE, 0xff},
+                                  {DMTCFOR, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCFOR, DMTCONE, 0xff},
+                                  {0, DMTCTHR, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCFOR, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCFOR, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCSEV, 0, DMTCONE, 0xff},
+                                  {DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff},
+                                  {0, DMTCSEV, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCSIX, 0, DMTCONE, 0xff},
+                                  {DMTCSEV, 0, DMTCONE, 0xff},
+                                  {DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff},
+                                  {0, DMTCSEV, DMTCONE, 0xff},
+                                  {0, DMTCSIX, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR},
+                                {DMTCLEAR,
+                                 {{DMTCFIV, 0, DMTCONE, 0xff},
+                                  {DMTCSIX, 0, DMTCONE, 0xff},
+                                  {DMTCSEV, 0, DMTCONE, 0xff},
+                                  {DMTCEIG, 0, DMTCONE, 0xff},
+                                  {0, DMTCEIG, DMTCONE, 0xff},
+                                  {0, DMTCSEV, DMTCONE, 0xff},
+                                  {0, DMTCSIX, DMTCONE, 0xff},
+                                  {0, DMTCFIV, DMTCONE, 0xff}},
+                                 DMTCLEAR,
+                                 DMTCLEAR}}},
+        sizeof(texture_0_t),
+    },
+};
+const size_t data_materials_count =
+    sizeof(data_materials) / sizeof(data_materials[0]);
+const uint32_t material_shader_1_vert_spv[] = {
+    0x07230203,
+    SPV_VERSION,
+    (SpvExecutionModeOriginLowerLeft << 16) + SpvSourceLanguageGLSL,
+    183,
+    0,
+    131089,
+    1,
+    393227,
+    1,
+    1280527431,
+    1685353262,
+    808793134,
+    0,
+    196622,
+    0,
+    1,
+    983055,
+    0,
+    4,
+    1852399981,
+    0,
+    21,
+    30,
+    103,
+    105,
+    109,
+    123,
+    144,
+    166,
+    169,
+    176,
+    196611,
+    2,
+    400,
+    589828,
+    1096764487,
+    1935622738,
+    1918988389,
+    1600484449,
+    1684105331,
+    1868526181,
+    1667590754,
+    29556,
+    589828,
+    1096764487,
+    1935622738,
+    1768186216,
+    1818191726,
+    1969712737,
+    1600481121,
+    1882206772,
+    7037793,
+    262149,
+    4,
+    1852399981,
+    0,
+    393221,
+    10,
+    1701736290,
+    1851880020,
+    1919903347,
+    109,
+    196613,
+    14,
+    5194325,
+    327686,
+    14,
+    0,
+    1701080941,
+    108,
+    327686,
+    14,
+    1,
+    1701736290,
+    115,
+    196613,
+    16,
+    7299701,
+    327685,
+    21,
+    1866624617,
+    1145660782,
+    115,
+    393221,
+    30,
+    1866624617,
+    1700226414,
+    1952999273,
+    115,
+    262149,
+    103,
+    1433695599,
+    86,
+    262149,
+    105,
+    1448439401,
+    0,
+    393221,
+    107,
+    1348430951,
+    1700164197,
+    2019914866,
+    0,
+    393222,
+    107,
+    0,
+    1348430951,
+    1953067887,
+    7237481,
+    196613,
+    109,
+    0,
+    262149,
+    112,
+    1329747283,
+    0,
+    262150,
+    112,
+    0,
+    28790,
+    393222,
+    112,
+    1,
+    1751607660,
+    1936674932,
+    0,
+    327686,
+    112,
+    2,
+    1633968496,
+    0,
+    327686,
+    112,
+    3,
+    2003134838,
+    7565136,
+    327686,
+    112,
+    4,
+    1650745712,
+    0,
+    262149,
+    114,
+    1868723571,
+    0,
+    262149,
+    123,
+    1867542121,
+    115,
+    196613,
+    134,
+    7565168,
+    327685,
+    144,
+    1316255087,
+    1634562671,
+    108,
+    327685,
+    166,
+    1867411049,
+    1818324338,
+    0,
+    327685,
+    169,
+    1282700655,
+    1952999273,
+    6514006,
+    327685,
+    176,
+    1450472815,
+    1450665321,
+    25445,
+    262215,
+    13,
+    6,
+    64,
+    262216,
+    14,
+    0,
+    5,
+    327752,
+    14,
+    0,
+    35,
+    0,
+    327752,
+    14,
+    0,
+    7,
+    16,
+    262216,
+    14,
+    1,
+    5,
+    327752,
+    14,
+    1,
+    35,
+    64,
+    327752,
+    14,
+    1,
+    7,
+    16,
+    196679,
+    14,
+    2,
+    262215,
+    16,
+    34,
+    0,
+    262215,
+    16,
+    33,
+    0,
+    262215,
+    21,
+    30,
+    4,
+    262215,
+    30,
+    30,
+    3,
+    262215,
+    103,
+    30,
+    0,
+    262215,
+    105,
+    30,
+    2,
+    327752,
+    107,
+    0,
+    11,
+    0,
+    196679,
+    107,
+    2,
+    262216,
+    112,
+    0,
+    5,
+    327752,
+    112,
+    0,
+    35,
+    0,
+    327752,
+    112,
+    0,
+    7,
+    16,
+    327752,
+    112,
+    1,
+    35,
+    64,
+    327752,
+    112,
+    2,
+    35,
+    76,
+    327752,
+    112,
+    3,
+    35,
+    80,
+    327752,
+    112,
+    4,
+    35,
+    92,
+    196679,
+    112,
+    2,
+    262215,
+    114,
+    34,
+    0,
+    262215,
+    114,
+    33,
+    2,
+    262215,
+    123,
+    30,
+    0,
+    262215,
+    144,
+    30,
+    1,
+    262215,
+    166,
+    30,
+    1,
+    262215,
+    169,
+    30,
+    3,
+    262215,
+    176,
+    30,
+    2,
+    131091,
+    2,
+    196641,
+    3,
+    2,
+    196630,
+    6,
+    32,
+    262167,
+    7,
+    6,
+    4,
+    262168,
+    8,
+    7,
+    4,
+    262176,
+    9,
+    7,
+    8,
+    262165,
+    11,
+    32,
+    0,
+    262187,
+    11,
+    12,
+    64,
+    262172,
+    13,
+    8,
+    12,
+    262174,
+    14,
+    8,
+    13,
+    262176,
+    15,
+    2,
+    14,
+    262203,
+    15,
+    16,
+    2,
+    262165,
+    17,
+    32,
+    1,
+    262187,
+    17,
+    18,
+    1,
+    262167,
+    19,
+    17,
+    4,
+    262176,
+    20,
+    1,
+    19,
+    262203,
+    20,
+    21,
+    1,
+    262187,
+    11,
+    22,
+    0,
+    262176,
+    23,
+    1,
+    17,
+    262176,
+    26,
+    2,
+    8,
+    262176,
+    29,
+    1,
+    7,
+    262203,
+    29,
+    30,
+    1,
+    262176,
+    31,
+    1,
+    6,
+    262187,
+    11,
+    35,
+    1,
+    262187,
+    11,
+    57,
+    2,
+    262187,
+    11,
+    79,
+    3,
+    262167,
+    101,
+    6,
+    2,
+    262176,
+    102,
+    3,
+    101,
+    262203,
+    102,
+    103,
+    3,
+    262176,
+    104,
+    1,
+    101,
+    262203,
+    104,
+    105,
+    1,
+    196638,
+    107,
+    7,
+    262176,
+    108,
+    3,
+    107,
+    262203,
+    108,
+    109,
+    3,
+    262187,
+    17,
+    110,
+    0,
+    262167,
+    111,
+    6,
+    3,
+    458782,
+    112,
+    8,
+    111,
+    6,
+    111,
+    6,
+    262176,
+    113,
+    2,
+    112,
+    262203,
+    113,
+    114,
+    2,
+    262176,
+    122,
+    1,
+    111,
+    262203,
+    122,
+    123,
+    1,
+    262187,
+    6,
+    125,
+    1065353216,
+    262176,
+    131,
+    3,
+    7,
+    262176,
+    133,
+    7,
+    7,
+    262176,
+    143,
+    3,
+    111,
+    262203,
+    143,
+    144,
+    3,
+    262168,
+    151,
+    111,
+    3,
+    262187,
+    6,
+    152,
+    0,
+    262203,
+    122,
+    166,
+    1,
+    262203,
+    143,
+    169,
+    3,
+    262176,
+    170,
+    2,
+    111,
+    262203,
+    143,
+    176,
+    3,
+    262187,
+    17,
+    177,
+    3,
+    327734,
+    2,
+    4,
+    0,
+    3,
+    131320,
+    5,
+    262203,
+    9,
+    10,
+    7,
+    262203,
+    133,
+    134,
+    7,
+    327745,
+    23,
+    24,
+    21,
+    22,
+    262205,
+    17,
+    25,
+    24,
+    393281,
+    26,
+    27,
+    16,
+    18,
+    25,
+    262205,
+    8,
+    28,
+    27,
+    327745,
+    31,
+    32,
+    30,
+    22,
+    262205,
+    6,
+    33,
+    32,
+    327823,
+    8,
+    34,
+    28,
+    33,
+    196670,
+    10,
+    34,
+    327745,
+    23,
+    36,
+    21,
+    35,
+    262205,
+    17,
+    37,
+    36,
+    393281,
+    26,
+    38,
+    16,
+    18,
+    37,
+    262205,
+    8,
+    39,
+    38,
+    327745,
+    31,
+    40,
+    30,
+    35,
+    262205,
+    6,
+    41,
+    40,
+    327823,
+    8,
+    42,
+    39,
+    41,
+    262205,
+    8,
+    43,
+    10,
+    327761,
+    7,
+    44,
+    43,
+    0,
+    327761,
+    7,
+    45,
+    42,
+    0,
+    327809,
+    7,
+    46,
+    44,
+    45,
+    327761,
+    7,
+    47,
+    43,
+    1,
+    327761,
+    7,
+    48,
+    42,
+    1,
+    327809,
+    7,
+    49,
+    47,
+    48,
+    327761,
+    7,
+    50,
+    43,
+    2,
+    327761,
+    7,
+    51,
+    42,
+    2,
+    327809,
+    7,
+    52,
+    50,
+    51,
+    327761,
+    7,
+    53,
+    43,
+    3,
+    327761,
+    7,
+    54,
+    42,
+    3,
+    327809,
+    7,
+    55,
+    53,
+    54,
+    458832,
+    8,
+    56,
+    46,
+    49,
+    52,
+    55,
+    196670,
+    10,
+    56,
+    327745,
+    23,
+    58,
+    21,
+    57,
+    262205,
+    17,
+    59,
+    58,
+    393281,
+    26,
+    60,
+    16,
+    18,
+    59,
+    262205,
+    8,
+    61,
+    60,
+    327745,
+    31,
+    62,
+    30,
+    57,
+    262205,
+    6,
+    63,
+    62,
+    327823,
+    8,
+    64,
+    61,
+    63,
+    262205,
+    8,
+    65,
+    10,
+    327761,
+    7,
+    66,
+    65,
+    0,
+    327761,
+    7,
+    67,
+    64,
+    0,
+    327809,
+    7,
+    68,
+    66,
+    67,
+    327761,
+    7,
+    69,
+    65,
+    1,
+    327761,
+    7,
+    70,
+    64,
+    1,
+    327809,
+    7,
+    71,
+    69,
+    70,
+    327761,
+    7,
+    72,
+    65,
+    2,
+    327761,
+    7,
+    73,
+    64,
+    2,
+    327809,
+    7,
+    74,
+    72,
+    73,
+    327761,
+    7,
+    75,
+    65,
+    3,
+    327761,
+    7,
+    76,
+    64,
+    3,
+    327809,
+    7,
+    77,
+    75,
+    76,
+    458832,
+    8,
+    78,
+    68,
+    71,
+    74,
+    77,
+    196670,
+    10,
+    78,
+    327745,
+    23,
+    80,
+    21,
+    79,
+    262205,
+    17,
+    81,
+    80,
+    393281,
+    26,
+    82,
+    16,
+    18,
+    81,
+    262205,
+    8,
+    83,
+    82,
+    327745,
+    31,
+    84,
+    30,
+    79,
+    262205,
+    6,
+    85,
+    84,
+    327823,
+    8,
+    86,
+    83,
+    85,
+    262205,
+    8,
+    87,
+    10,
+    327761,
+    7,
+    88,
+    87,
+    0,
+    327761,
+    7,
+    89,
+    86,
+    0,
+    327809,
+    7,
+    90,
+    88,
+    89,
+    327761,
+    7,
+    91,
+    87,
+    1,
+    327761,
+    7,
+    92,
+    86,
+    1,
+    327809,
+    7,
+    93,
+    91,
+    92,
+    327761,
+    7,
+    94,
+    87,
+    2,
+    327761,
+    7,
+    95,
+    86,
+    2,
+    327809,
+    7,
+    96,
+    94,
+    95,
+    327761,
+    7,
+    97,
+    87,
+    3,
+    327761,
+    7,
+    98,
+    86,
+    3,
+    327809,
+    7,
+    99,
+    97,
+    98,
+    458832,
+    8,
+    100,
+    90,
+    93,
+    96,
+    99,
+    196670,
+    10,
+    100,
+    262205,
+    101,
+    106,
+    105,
+    196670,
+    103,
+    106,
+    327745,
+    26,
+    115,
+    114,
+    110,
+    262205,
+    8,
+    116,
+    115,
+    327745,
+    26,
+    117,
+    16,
+    110,
+    262205,
+    8,
+    118,
+    117,
+    327826,
+    8,
+    119,
+    116,
+    118,
+    262205,
+    8,
+    120,
+    10,
+    327826,
+    8,
+    121,
+    119,
+    120,
+    262205,
+    111,
+    124,
+    123,
+    327761,
+    6,
+    126,
+    124,
+    0,
+    327761,
+    6,
+    127,
+    124,
+    1,
+    327761,
+    6,
+    128,
+    124,
+    2,
+    458832,
+    7,
+    129,
+    126,
+    127,
+    128,
+    125,
+    327825,
+    7,
+    130,
+    121,
+    129,
+    327745,
+    131,
+    132,
+    109,
+    110,
+    196670,
+    132,
+    130,
+    327745,
+    26,
+    135,
+    16,
+    110,
+    262205,
+    8,
+    136,
+    135,
+    262205,
+    111,
+    137,
+    123,
+    327761,
+    6,
+    138,
+    137,
+    0,
+    327761,
+    6,
+    139,
+    137,
+    1,
+    327761,
+    6,
+    140,
+    137,
+    2,
+    458832,
+    7,
+    141,
+    138,
+    139,
+    140,
+    125,
+    327825,
+    7,
+    142,
+    136,
+    141,
+    196670,
+    134,
+    142,
+    327745,
+    26,
+    145,
+    16,
+    110,
+    262205,
+    8,
+    146,
+    145,
+    262205,
+    8,
+    147,
+    10,
+    327826,
+    8,
+    148,
+    146,
+    147,
+    262228,
+    8,
+    149,
+    148,
+    393228,
+    8,
+    150,
+    1,
+    34,
+    149,
+    393297,
+    6,
+    153,
+    150,
+    0,
+    0,
+    393297,
+    6,
+    154,
+    150,
+    0,
+    1,
+    393297,
+    6,
+    155,
+    150,
+    0,
+    2,
+    393297,
+    6,
+    156,
+    150,
+    1,
+    0,
+    393297,
+    6,
+    157,
+    150,
+    1,
+    1,
+    393297,
+    6,
+    158,
+    150,
+    1,
+    2,
+    393297,
+    6,
+    159,
+    150,
+    2,
+    0,
+    393297,
+    6,
+    160,
+    150,
+    2,
+    1,
+    393297,
+    6,
+    161,
+    150,
+    2,
+    2,
+    393296,
+    111,
+    162,
+    153,
+    154,
+    155,
+    393296,
+    111,
+    163,
+    156,
+    157,
+    158,
+    393296,
+    111,
+    164,
+    159,
+    160,
+    161,
+    393296,
+    151,
+    165,
+    162,
+    163,
+    164,
+    262205,
+    111,
+    167,
+    166,
+    327825,
+    111,
+    168,
+    165,
+    167,
+    196670,
+    144,
+    168,
+    327745,
+    170,
+    171,
+    114,
+    18,
+    262205,
+    111,
+    172,
+    171,
+    262205,
+    7,
+    173,
+    134,
+    524367,
+    111,
+    174,
+    173,
+    173,
+    0,
+    1,
+    2,
+    327811,
+    111,
+    175,
+    172,
+    174,
+    196670,
+    169,
+    175,
+    327745,
+    170,
+    178,
+    114,
+    177,
+    262205,
+    111,
+    179,
+    178,
+    262205,
+    7,
+    180,
+    134,
+    524367,
+    111,
+    181,
+    180,
+    180,
+    0,
+    1,
+    2,
+    327811,
+    111,
+    182,
+    179,
+    181,
+    196670,
+    176,
+    182,
+    65789,
+    65592,
+};
+
+const uint32_t material_shader_1_frag_spv[] = {
+    0x07230203,
+    SPV_VERSION,
+    (SpvExecutionModeOriginLowerLeft << 16) + SpvSourceLanguageGLSL,
+    71,
+    0,
+    131089,
+    1,
+    393227,
+    1,
+    1280527431,
+    1685353262,
+    808793134,
+    0,
+    196622,
+    0,
+    1,
+    655375,
+    4,
+    4,
+    1852399981,
+    0,
+    17,
+    24,
+    53,
+    69,
+    70,
+    196624,
+    4,
+    7,
+    196611,
+    2,
+    400,
+    589828,
+    1096764487,
+    1935622738,
+    1918988389,
+    1600484449,
+    1684105331,
+    1868526181,
+    1667590754,
+    29556,
+    589828,
+    1096764487,
+    1935622738,
+    1768186216,
+    1818191726,
+    1969712737,
+    1600481121,
+    1882206772,
+    7037793,
+    262149,
+    4,
+    1852399981,
+    0,
+    262149,
+    9,
+    1869377379,
+    114,
+    393221,
+    13,
+    1886216563,
+    1131570540,
+    1919904879,
+    7364941,
+    262149,
+    17,
+    1448439401,
+    0,
+    262149,
+    21,
+    1953720676,
+    7500115,
+    327685,
+    24,
+    1766616681,
+    1450469479,
+    25445,
+    262149,
+    29,
+    1667585644,
+    0,
+    262149,
+    34,
+    1702130785,
+    110,
+    327685,
+    44,
+    1886351972,
+    1684105331,
+    30575,
+    393221,
+    53,
+    1182037359,
+    1130848626,
+    1919904879,
+    0,
+    327685,
+    69,
+    1867411049,
+    1818324338,
+    0,
+    327685,
+    70,
+    1767272041,
+    1700165477,
+    99,
+    262215,
+    13,
+    34,
+    0,
+    262215,
+    13,
+    33,
+    1,
+    262215,
+    17,
+    30,
+    0,
+    262215,
+    24,
+    30,
+    3,
+    262215,
+    53,
+    30,
+    0,
+    262215,
+    69,
+    30,
+    1,
+    262215,
+    70,
+    30,
+    2,
+    131091,
+    2,
+    196641,
+    3,
+    2,
+    196630,
+    6,
+    32,
+    262167,
+    7,
+    6,
+    4,
+    262176,
+    8,
+    7,
+    7,
+    589849,
+    10,
+    6,
+    1,
+    0,
+    0,
+    0,
+    1,
+    0,
+    196635,
+    11,
+    10,
+    262176,
+    12,
+    0,
+    11,
+    262203,
+    12,
+    13,
+    0,
+    262167,
+    15,
+    6,
+    2,
+    262176,
+    16,
+    1,
+    15,
+    262203,
+    16,
+    17,
+    1,
+    262176,
+    20,
+    7,
+    6,
+    262167,
+    22,
+    6,
+    3,
+    262176,
+    23,
+    1,
+    22,
+    262203,
+    23,
+    24,
+    1,
+    262176,
+    28,
+    7,
+    22,
+    262187,
+    6,
+    35,
+    1065353216,
+    262187,
+    6,
+    36,
+    961656599,
+    262187,
+    6,
+    41,
+    0,
+    262187,
+    6,
+    45,
+    998445679,
+    262176,
+    52,
+    3,
+    7,
+    262203,
+    52,
+    53,
+    3,
+    262203,
+    23,
+    69,
+    1,
+    262203,
+    23,
+    70,
+    1,
+    327734,
+    2,
+    4,
+    0,
+    3,
+    131320,
+    5,
+    262203,
+    8,
+    9,
+    7,
+    262203,
+    20,
+    21,
+    7,
+    262203,
+    28,
+    29,
+    7,
+    262203,
+    20,
+    34,
+    7,
+    262203,
+    20,
+    44,
+    7,
+    262205,
+    11,
+    14,
+    13,
+    262205,
+    15,
+    18,
+    17,
+    327767,
+    7,
+    19,
+    14,
+    18,
+    196670,
+    9,
+    19,
+    262205,
+    22,
+    25,
+    24,
+    262205,
+    22,
+    26,
+    24,
+    327828,
+    6,
+    27,
+    25,
+    26,
+    196670,
+    21,
+    27,
+    262205,
+    22,
+    30,
+    24,
+    262205,
+    6,
+    31,
+    21,
+    393228,
+    6,
+    32,
+    1,
+    32,
+    31,
+    327822,
+    22,
+    33,
+    30,
+    32,
+    196670,
+    29,
+    33,
+    262205,
+    6,
+    37,
+    21,
+    393228,
+    6,
+    38,
+    1,
+    31,
+    37,
+    327813,
+    6,
+    39,
+    36,
+    38,
+    327811,
+    6,
+    40,
+    35,
+    39,
+    524300,
+    6,
+    42,
+    1,
+    43,
+    40,
+    41,
+    35,
+    458764,
+    6,
+    43,
+    1,
+    40,
+    42,
+    41,
+    196670,
+    34,
+    43,
+    262205,
+    6,
+    46,
+    21,
+    393228,
+    6,
+    47,
+    1,
+    31,
+    46,
+    327813,
+    6,
+    48,
+    45,
+    47,
+    327811,
+    6,
+    49,
+    35,
+    48,
+    524300,
+    6,
+    50,
+    1,
+    43,
+    49,
+    41,
+    35,
+    458764,
+    6,
+    51,
+    1,
+    40,
+    50,
+    41,
+    196670,
+    44,
+    51,
+    262205,
+    7,
+    54,
+    9,
+    262205,
+    6,
+    55,
+    44,
+    327811,
+    6,
+    56,
+    35,
+    55,
+    327822,
+    7,
+    57,
+    54,
+    56,
+    327761,
+    6,
+    58,
+    57,
+    0,
+    327761,
+    6,
+    59,
+    57,
+    1,
+    327761,
+    6,
+    60,
+    57,
+    2,
+    327761,
+    6,
+    61,
+    57,
+    3,
+    458832,
+    7,
+    62,
+    58,
+    59,
+    60,
+    61,
+    196670,
+    53,
+    62,
+    262205,
+    6,
+    63,
+    34,
+    262205,
+    7,
+    64,
+    53,
+    524367,
+    22,
+    65,
+    64,
+    64,
+    0,
+    1,
+    2,
+    327822,
+    22,
+    66,
+    65,
+    63,
+    262205,
+    7,
+    67,
+    53,
+    589903,
+    7,
+    68,
+    67,
+    66,
+    4,
+    5,
+    6,
+    3,
+    196670,
+    53,
+    68,
+    65789,
+    65592,
 };
+const size_t material_shader_1_vert_size = sizeof(material_shader_1_vert_spv);
+const size_t material_shader_1_frag_size = sizeof(material_shader_1_frag_spv);
diff -bNur 0007shared-ubo/data_bulk.h 0008multi-material/data_bulk.h
--- 0007shared-ubo/data_bulk.h	2019-03-02 19:55:02.561358109 -0600
+++ 0008multi-material/data_bulk.h	2019-03-02 19:55:02.565358211 -0600
@@ -4,7 +4,14 @@
 // Must not be higher than same const in skinning shader
 #define MAX_BONES 64
 
-typedef struct {
+typedef struct
+{
   mat4 model;
   mat4 bones[MAX_BONES];
 } material_0_ubo_t;
+
+typedef struct
+{
+        mat4 model;
+        mat4 bones[MAX_BONES];
+} material_1_ubo_t;
diff -bNur 0007shared-ubo/data.h 0008multi-material/data.h
--- 0007shared-ubo/data.h	2019-03-02 19:55:02.561358109 -0600
+++ 0008multi-material/data.h	2019-03-02 19:55:02.565358211 -0600
@@ -33,7 +33,8 @@
 
 extern struct shared_ubo *data_model_shared_ubo;
 
-typedef struct {
+typedef struct
+{
   char *name;
   uint32_t first;
   uint32_t count;
@@ -41,7 +42,8 @@
 } data_model_t;
 extern data_model_t data_models[];
 
-typedef struct data_model_instance {
+typedef struct data_model_instance
+{
   char *name;
   size_t model;
   void (*update)(struct data_model_instance *, double);
@@ -53,15 +55,19 @@
 extern struct list_head data_model_instances;
 extern void (*data_setup_model_instance)(data_model_instance_t *inst);
 
-typedef struct {
-  struct {
+typedef struct
+{
+        struct
+        {
     const void *spv;
     const size_t *size;
   } vert, frag;
 } data_material_shader_t;
 extern const data_material_shader_t data_material_shaders[];
+extern const size_t data_material_shaders_count;
 
-typedef struct {
+typedef struct
+{
   char *name;
   size_t shader;
   VkDeviceSize ubo_vertex_shader_size;
@@ -73,13 +79,15 @@
   VkDeviceSize texture_size;
 } data_material_t;
 extern const data_material_t data_materials[];
+extern const size_t data_materials_count;
 
 #define UNIFORM_ALIGN (sizeof(float) * 4)
 #define FROM_UNIFORM_ALLOC(x) (x * UNIFORM_ALIGN)
 #define TO_UNIFORM_ALLOC(x) ((x + UNIFORM_ALIGN - 1) / UNIFORM_ALIGN)
 #define UNIFORM_SIZE (4096 * 4096)
 #define SHARED_UNIFORM_SIZE (4096 * 32)
-typedef struct {
+typedef struct
+{
   VkDescriptorSet descriptor_set;
   size_t offset;
   size_t range;
diff -bNur 0007shared-ubo/libdata.c 0008multi-material/libdata.c
--- 0007shared-ubo/libdata.c	2019-03-02 20:06:22.821345727 -0600
+++ 0008multi-material/libdata.c	2019-03-02 20:06:22.825345914 -0600
@@ -30,6 +30,10 @@
 const size_t material_shader_0_vert_size;
 const uint8_t material_shader_0_frag_spv[1];
 const size_t material_shader_0_frag_size;
+const uint8_t material_shader_1_vert_spv[1];
+const size_t material_shader_1_vert_size;
+const uint8_t material_shader_1_frag_spv[1];
+const size_t material_shader_1_frag_size;
 const data_material_shader_t data_material_shaders[] = {
     {{
          material_shader_0_vert_spv,
@@ -39,7 +43,17 @@
          material_shader_0_frag_spv,
          &material_shader_0_frag_size,
      }},
+    {{
+         material_shader_1_vert_spv,
+         &material_shader_1_vert_size,
+     },
+     {
+         material_shader_1_frag_spv,
+         &material_shader_1_frag_size,
+     }},
 };
+const size_t data_material_shaders_count =
+    sizeof(data_material_shaders) / sizeof(data_material_shaders[0]);
 
 void shoot_forward(data_model_instance_t *ptr, double t)
 {
@@ -56,7 +70,8 @@
 
 typedef struct
 {
-        data_model_instance_t obj, other_obj;
+        data_model_instance_t obj;
+        data_model_instance_t other_obj;
 } model_instance_t;
 model_instance_t model_instance;
 struct list_head data_model_instances = {&(model_instance.obj.list),
diff -bNur 0007shared-ubo/vulkan.c 0008multi-material/vulkan.c
--- 0007shared-ubo/vulkan.c	2019-03-03 15:07:51.304459958 -0600
+++ 0008multi-material/vulkan.c	2019-03-03 15:07:57.262704289 -0600
@@ -669,7 +669,7 @@
         assert((err == VK_SUCCESS) && "vkAllocateDescriptorSets: Failed.");
 }
 
-inline static void update_descriptor_set(uniform_map_t *map)
+inline static void update_descriptor_set(uniform_map_t *map, size_t material)
 {
         VkDescriptorBufferInfo uniform_descriptors[2];
         static const VkDescriptorBufferInfo EmptyVkDescriptorBufferInfo;
@@ -699,9 +699,9 @@
         VkDescriptorImageInfo image_info;
         static const VkDescriptorImageInfo EmptyVkDescriptorImageInfo;
         image_info = EmptyVkDescriptorImageInfo;
-        image_info.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
-        image_info.imageView = texture_image_views[0];
+        image_info.imageView = texture_image_views[material];
         image_info.sampler = texture_image_sampler;
+        image_info.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
 
         write_descriptor_sets[1] = EmptyVkWriteDescriptorSet;
         write_descriptor_sets[1].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
@@ -723,7 +723,7 @@
         this_map = list_entry(inst->uniform_map, uniform_map_t, list);
         if (this_map->descriptor_set == VK_NULL_HANDLE)
                 allocate_descriptor_set(&this_map->descriptor_set);
-        update_descriptor_set(this_map);
+        update_descriptor_set(this_map, data_models[inst->model].material);
 }
 
 inline static void create_pipeline_layout()
@@ -922,9 +922,6 @@
         image_create_info = EmptyVkImageViewCreateInfo;
         image_create_info.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
         image_create_info.imageType = VK_IMAGE_TYPE_2D;
-        image_create_info.format = data_materials[0].texture_format;
-        image_create_info.extent.width = data_materials[0].texture_width;
-        image_create_info.extent.height = data_materials[0].texture_height;
         image_create_info.extent.depth = 1;
         image_create_info.mipLevels = 1;
         image_create_info.arrayLayers = 1;
@@ -936,9 +933,15 @@
         image_create_info.pQueueFamilyIndices = NULL;
         image_create_info.initialLayout = VK_IMAGE_LAYOUT_PREINITIALIZED;
 
+        for (size_t i = 0; i < data_materials_count; i++)
+        {
+                image_create_info.format = data_materials[i].texture_format;
+                image_create_info.extent.width = data_materials[i].texture_width;
+                image_create_info.extent.height = data_materials[i].texture_height;
         VkResult err;
-        err = vkCreateImage(device, &image_create_info, NULL, &texture_images[0]);
+                err = vkCreateImage(device, &image_create_info, NULL, &texture_images[i]);
         assert((err == VK_SUCCESS) && "vkCreateImage: Failed texture.");
+        }
 }
 
 inline static void
@@ -987,14 +990,17 @@
                      VkDeviceMemory *texture_image_memorys)
 {
         create_texture_images(texture_images);
-        allocate_texture_image(texture_images[0], gpu_memory_properties,
-                               &texture_image_memorys[0]);
+        for (size_t i = 0; i < data_materials_count; i++)
+        {
+                allocate_texture_image(texture_images[i], gpu_memory_properties,
+                                       &texture_image_memorys[i]);
 
         void *data;
-        vkMapMemory(device, texture_image_memorys[0], 0,
-                    data_materials[0].texture_size, 0, &data);
-        memcpy(data, data_materials[0].texture, data_materials[0].texture_size);
-        vkUnmapMemory(device, texture_image_memorys[0]);
+                vkMapMemory(device, texture_image_memorys[i], 0,
+                            data_materials[i].texture_size, 0, &data);
+                memcpy(data, data_materials[i].texture, data_materials[i].texture_size);
+                vkUnmapMemory(device, texture_image_memorys[i]);
+        }
 }
 
 inline static void create_image_views(VkImage *texture_images)
@@ -1003,9 +1009,7 @@
         static const VkImageViewCreateInfo EmptyVkImageViewCreateInfo;
         image_view_create_info = EmptyVkImageViewCreateInfo;
         image_view_create_info.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
-        image_view_create_info.image = texture_images[0];
         image_view_create_info.viewType = VK_IMAGE_VIEW_TYPE_2D;
-        image_view_create_info.format = data_materials[0].texture_format;
         image_view_create_info.components.r = VK_COMPONENT_SWIZZLE_IDENTITY;
         image_view_create_info.components.g = VK_COMPONENT_SWIZZLE_IDENTITY;
         image_view_create_info.components.b = VK_COMPONENT_SWIZZLE_IDENTITY;
@@ -1017,10 +1021,15 @@
         image_view_create_info.subresourceRange.baseArrayLayer = 0;
         image_view_create_info.subresourceRange.layerCount = 1;
 
+        for (size_t i = 0; i < data_materials_count; i++)
+        {
+                image_view_create_info.image = texture_images[i];
+                image_view_create_info.format = data_materials[i].texture_format;
         VkResult err;
         err = vkCreateImageView(device, &image_view_create_info, NULL,
-                                &texture_image_views[0]);
+                                        &texture_image_views[i]);
         assert((err == VK_SUCCESS) && "vkCreateImageView: Failed texture.");
+        }
 }
 
 inline static void
@@ -1041,20 +1050,23 @@
         shader_module_create_info = EmptyVkShaderModuleCreateInfo;
         shader_module_create_info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
 
-        shader_module_create_info.codeSize = *data_material_shaders[0].vert.size;
+        for (size_t i = 0; i < data_material_shaders_count; i++)
+        {
+                shader_module_create_info.codeSize = *data_material_shaders[i].vert.size;
         shader_module_create_info.pCode =
-            (uint32_t *)data_material_shaders[0].vert.spv;
+                    (uint32_t *)data_material_shaders[i].vert.spv;
         VkResult err;
         err = vkCreateShaderModule(device, &shader_module_create_info, NULL,
-                                   &vert_modules[0]);
+                                           &vert_modules[i]);
         assert((err == VK_SUCCESS) && "vkCreateShaderModule: Failed vert.");
 
-        shader_module_create_info.codeSize = *data_material_shaders[0].frag.size;
+                shader_module_create_info.codeSize = *data_material_shaders[i].frag.size;
         shader_module_create_info.pCode =
-            (uint32_t *)data_material_shaders[0].frag.spv;
+                    (uint32_t *)data_material_shaders[i].frag.spv;
         err = vkCreateShaderModule(device, &shader_module_create_info, NULL,
-                                   &frag_modules[0]);
+                                           &frag_modules[i]);
         assert((err == VK_SUCCESS) && "vkCreateShaderModule: Failed frag.");
+        }
 }
 
 inline static void create_graphice_pipelines(VkShaderModule *vert_modules,
@@ -1070,8 +1082,6 @@
             VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
         shader_stages_create_info[0].stage = VK_SHADER_STAGE_VERTEX_BIT;
         shader_stages_create_info[1].stage = VK_SHADER_STAGE_FRAGMENT_BIT;
-        shader_stages_create_info[0].module = vert_modules[0];
-        shader_stages_create_info[1].module = frag_modules[0];
         shader_stages_create_info[0].pName = shader_stages_create_info[1].pName =
             "main";
 
@@ -1209,11 +1219,16 @@
         pipeline_create_info.renderPass = render_pass;
         pipeline_create_info.subpass = 0;
 
+        for (size_t i = 0; i < data_material_shaders_count; i++)
+        {
+                shader_stages_create_info[0].module = vert_modules[i];
+                shader_stages_create_info[1].module = frag_modules[i];
         VkResult err;
         err = vkCreateGraphicsPipelines(device, VK_NULL_HANDLE, 1,
                                         &pipeline_create_info, NULL,
-                                        &graphics_pipelines[0]);
+                                                &graphics_pipelines[i]);
         assert((err == VK_SUCCESS) && "vkCreateGraphicsPipelines: Failed.");
+        }
 }
 
 inline static void setup_materials(VkImage *texture_images,
@@ -1414,24 +1429,29 @@
 
         vkCmdBindIndexBuffer(command_buffer, index_buffer, 0, VK_INDEX_TYPE_UINT32);
 
-        data_model_instance_t *inst =
-            list_entry(data_model_instances.next, data_model_instance_t, list);
+        size_t bound_shaders = SIZE_MAX;
+        data_model_instance_t *inst;
+        list_for_each_entry(inst, &data_model_instances, list)
+        {
+                if (bound_shaders !=
+                    data_materials[data_models[inst->model].material].shader)
+                {
         vkCmdBindPipeline(
             command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS,
             graphics_pipelines[data_materials[data_models[inst->model].material]
                                    .shader]);
+                        bound_shaders = data_materials[data_models[inst->model].material].shader;
+                }
 
-        list_for_each_entry(inst, &data_model_instances, list)
-        {
                 vkCmdBindDescriptorSets(
                     command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 0, 1,
-                    &list_entry(inst->uniform_map, uniform_map_t, list)->descriptor_set,
+                    &list_entry(inst->uniform_map, uniform_map_t, list)
+                         ->descriptor_set,
                     0, NULL);
 
                 vkCmdDrawIndexed(command_buffer, data_models[inst->model].count, 1,
                                  data_models[inst->model].first, 0, 0);
         }
-
         vkCmdEndRenderPass(command_buffer);
 
         VkResult err;
@@ -1539,14 +1559,26 @@
         wait_semaphore = VK_NULL_HANDLE;
         vkDestroyCommandPool(device, command_pool, NULL);
         command_pool = VK_NULL_HANDLE;
-        vkDestroyPipeline(device, graphics_pipelines[0], NULL);
-        graphics_pipelines[0] = VK_NULL_HANDLE;
-        vkDestroyShaderModule(device, frag_modules[0], NULL);
-        frag_modules[0] = VK_NULL_HANDLE;
-        vkDestroyShaderModule(device, vert_modules[0], NULL);
-        vert_modules[0] = VK_NULL_HANDLE;
-        vkDestroyPipelineLayout(device, pipeline_layout, NULL);
-        pipeline_layout = VK_NULL_HANDLE;
+        for (size_t i = 0; i < data_material_shaders_count; i++)
+        {
+                vkDestroyPipeline(device, graphics_pipelines[i], NULL);
+                graphics_pipelines[i] = VK_NULL_HANDLE;
+                vkDestroyShaderModule(device, frag_modules[i], NULL);
+                frag_modules[i] = VK_NULL_HANDLE;
+                vkDestroyShaderModule(device, vert_modules[i], NULL);
+                vert_modules[i] = VK_NULL_HANDLE;
+        }
+        vkDestroySampler(device, texture_image_sampler, NULL);
+        texture_image_sampler = VK_NULL_HANDLE;
+        for (size_t i = 0; i < data_materials_count; i++)
+        {
+                vkDestroyImageView(device, texture_image_views[i], NULL);
+                texture_image_views[i] = VK_NULL_HANDLE;
+                vkFreeMemory(device, texture_image_memorys[i], NULL);
+                texture_image_memorys[i] = VK_NULL_HANDLE;
+                vkDestroyImage(device, texture_images[i], NULL);
+                texture_images[i] = VK_NULL_HANDLE;
+        }
         vkFreeMemory(device, index_buffer_memmory, NULL);
         index_buffer_memmory = VK_NULL_HANDLE;
         vkDestroyBuffer(device, index_buffer, NULL);
@@ -1561,14 +1593,6 @@
         descriptor_pool = VK_NULL_HANDLE;
         vkDestroyDescriptorSetLayout(device, descriptor_set_layout, NULL);
         descriptor_set_layout = VK_NULL_HANDLE;
-        vkDestroySampler(device, texture_image_sampler, NULL);
-        texture_image_sampler = VK_NULL_HANDLE;
-        vkDestroyImageView(device, texture_image_views[0], NULL);
-        texture_image_views[0] = VK_NULL_HANDLE;
-        vkFreeMemory(device, texture_image_memorys[0], NULL);
-        texture_image_memorys[0] = VK_NULL_HANDLE;
-        vkDestroyImage(device, texture_images[0], NULL);
-        texture_images[0] = VK_NULL_HANDLE;
         vkUnmapMemory(device, uniform_buffer_memmory);
         data_model_instance_t *ptr;
         list_for_each_entry(ptr, &data_model_instances, list)
@@ -1637,13 +1661,13 @@
         setup_vertex_buffer(gpu_memory_properties);
         setup_index_buffer(gpu_memory_properties);
 
-        VkImage texture_images[] = {VK_NULL_HANDLE};
-        VkDeviceMemory texture_image_memorys[] = {VK_NULL_HANDLE};
-        VkImageView _texture_image_views[] = {VK_NULL_HANDLE};
+        VkImage texture_images[data_materials_count];
+        VkDeviceMemory texture_image_memorys[data_materials_count];
+        VkImageView _texture_image_views[data_materials_count];
         texture_image_views = _texture_image_views;
-        VkShaderModule vert_modules[] = {VK_NULL_HANDLE};
-        VkShaderModule frag_modules[] = {VK_NULL_HANDLE};
-        VkPipeline graphics_pipelines[] = {VK_NULL_HANDLE};
+        VkShaderModule vert_modules[data_material_shaders_count];
+        VkShaderModule frag_modules[data_material_shaders_count];
+        VkPipeline graphics_pipelines[data_material_shaders_count];
         setup_materials(texture_images, gpu_memory_properties, texture_image_memorys, vert_modules, frag_modules, graphics_pipelines);
 
         data_setup_model_instance = setup_model_instance;
