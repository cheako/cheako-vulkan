diff -bNur 0003index-buffer/data_bulk.c 0004cube/data_bulk.c
--- 0003index-buffer/data_bulk.c	2019-03-03 15:08:52.160918059 -0600
+++ 0004cube/data_bulk.c	2019-03-03 15:08:52.164917190 -0600
@@ -8,25 +8,181 @@
         float boneWeights[MAX_BONES_PER_VERTEX];
         uint32_t boneIDs[MAX_BONES_PER_VERTEX];
 } vertex_t;
+
+/* Texture
+ ####0AA1########
+ ####AAAA########
+ ####AAAA########
+ ####2AA3########
+ 4BB56CC78DD9aEEb
+ BBBBCCCCDDDDEEEE
+ BBBBCCCCDDDDEEEE
+ cBBdeCCfgDDhEEEi
+ ####jFFk########
+ ####FFFF########
+ ####FFFF########
+ ####lFFm########
+ */
+
+#define DMVPFR -0.5f
+#define DMVPBA 0.5f
+#define DMVPBO -0.5f
+#define DMVPTO 0.5f
+#define DMVPRI -0.5f
+#define DMVPLE 0.5f
+
+#define DMVUXONE 0.0f
+#define DMVUXTWO 0.25f
+#define DMVUXTHR 0.5f
+#define DMVUXFOR 0.75f
+#define DMVUXFIV 1.0f
+#define DMVUYONE 0.0f
+#define DMVUYTWO 1.0f / 3.0f
+#define DMVUYTHR 2.0f / 3.0f
+#define DMVUYFOR 1.0f
 const vertex_t model_vertex[] = {
-    {{-0.5f, 0.5f, -0.5f},
-     {0.0f, 0.0f, -1.0f},
-     {0.0f, 2.0f / 3.0f},
+    {// 0
+     {DMVPLE, DMVPTO, DMVPBA},
+     {0.0f, DMVPTO * 2, 0.0f},
+     {DMVUXTWO, DMVUYONE},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 1
+     {DMVPRI, DMVPTO, DMVPBA},
+     {0.0f, DMVPTO * 2, 0.0f},
+     {DMVUXTHR, DMVUYONE},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 2
+     {DMVPLE, DMVPTO, DMVPFR},
+     {0.0f, DMVPTO * 2, 0.0f},
+     {DMVUXTWO, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 3
+     {DMVPRI, DMVPTO, DMVPFR},
+     {0.0f, DMVPTO * 2, 0.0f},
+     {DMVUXTHR, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 4
+     {DMVPLE, DMVPTO, DMVPBA},
+     {DMVPLE * 2, 0.0f, 0.0f},
+     {DMVUXONE, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 5
+     {DMVPLE, DMVPTO, DMVPFR},
+     {DMVPLE * 2, 0.0f, 0.0f},
+     {DMVUXTWO, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 6
+     {DMVPLE, DMVPTO, DMVPFR},
+     {0.0f, 0.0f, DMVPFR * 2},
+     {DMVUXTWO, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 7
+     {DMVPRI, DMVPTO, DMVPFR},
+     {0.0f, 0.0f, DMVPFR * 2},
+     {DMVUXTHR, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 8
+     {DMVPRI, DMVPTO, DMVPFR},
+     {DMVPRI * 2, 0.0f, 0.0f},
+     {DMVUXTHR, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// 9
+     {DMVPRI, DMVPTO, DMVPBA},
+     {DMVPRI * 2, 0.0f, 0.0f},
+     {DMVUXFOR, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// a
+     {DMVPRI, DMVPTO, DMVPBA},
+     {0.0f, 0.0f, DMVPBA * 2},
+     {DMVUXFOR, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// b
+     {DMVPLE, DMVPTO, DMVPBA},
+     {0.0f, 0.0f, DMVPBA * 2},
+     {DMVUXFIV, DMVUYTWO},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// c
+     {DMVPLE, DMVPBO, DMVPBA},
+     {DMVPLE * 2, 0.0f, 0.0f},
+     {DMVUXONE, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// d
+     {DMVPLE, DMVPBO, DMVPFR},
+     {DMVPLE * 2, 0.0f, 0.0f},
+     {DMVUXTWO, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// e
+     {DMVPLE, DMVPBO, DMVPFR},
+     {0.0f, 0.0f, DMVPFR * 2},
+     {DMVUXTWO, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// f
+     {DMVPRI, DMVPBO, DMVPFR},
+     {0.0f, 0.0f, DMVPFR * 2},
+     {DMVUXTHR, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// g
+     {DMVPRI, DMVPBO, DMVPFR},
+     {DMVPRI * 2, 0.0f, 0.0f},
+     {DMVUXTHR, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// h
+     {DMVPRI, DMVPBO, DMVPBA},
+     {DMVPRI * 2, 0.0f, 0.0f},
+     {DMVUXFOR, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// i
+     {DMVPRI, DMVPBO, DMVPBA},
+     {0.0f, 0.0f, DMVPBA * 2},
+     {DMVUXFOR, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// j
+     {DMVPLE, DMVPBO, DMVPBA},
+     {0.0f, 0.0f, DMVPBA * 2},
+     {DMVUXFIV, DMVUYTHR},
+     {1.0f, 0.0f, 0.0f, 0.0f},
+     {0, 0, 0, 0}},
+    {// k
+     {DMVPLE, DMVPBO, DMVPFR},
+     {0.0f, DMVPBO * 2, 0.0f},
+     {DMVUXTWO, DMVUYTHR},
      {1.0f, 0.0f, 0.0f, 0.0f},
      {0, 0, 0, 0}},
-    {{0.5f, -0.5f, -0.5f},
-     {0.0f, 0.0f, -1.0f},
-     {0.0f, 1.0f / 3.0f},
+    {// k
+     {DMVPRI, DMVPBO, DMVPFR},
+     {0.0f, DMVPBO * 2, 0.0f},
+     {DMVUXTHR, DMVUYTHR},
      {1.0f, 0.0f, 0.0f, 0.0f},
      {0, 0, 0, 0}},
-    {{-0.5f, -0.5f, -0.5f},
-     {0.0f, 0.0f, -1.0f},
-     {0.25f, 1.0f / 3.0f},
+    {// m
+     {DMVPLE, DMVPBO, DMVPBA},
+     {0.0f, DMVPBO * 2, 0.0f},
+     {DMVUXTWO, DMVUYFOR},
      {1.0f, 0.0f, 0.0f, 0.0f},
      {0, 0, 0, 0}},
-    {{0.5f, 0.5f, -0.5f},
-     {0.0f, 0.0f, -1.0f},
-     {0.25f, 2.0f / 3.0f},
+    {// n
+     {DMVPRI, DMVPBO, DMVPBA},
+     {0.0f, DMVPBO * 2, 0.0f},
+     {DMVUXTHR, DMVUYFOR},
      {1.0f, 0.0f, 0.0f, 0.0f},
      {0, 0, 0, 0}},
 };
@@ -67,18 +223,28 @@
         struct
         {
                 uint32_t first, second, third;
-        } square[2];
+        } cube[12];
 } *data_model_index = &(struct data_model_index){{
-    {0, 2, 1},
-    {0, 1, 3},
+    {2, 0, 1}, // A
+    {2, 1, 3},
+    {12, 4, 5}, // B
+    {12, 5, 13},
+    {14, 6, 7}, // C
+    {14, 7, 15},
+    {16, 8, 9}, // D
+    {16, 9, 17},
+    {18, 10, 11}, // E
+    {18, 11, 19},
+    {22, 20, 21}, // F
+    {22, 21, 23},
 }};
 const VkDeviceSize data_model_index_size = sizeof(*data_model_index);
 
 data_model_t data_models[] = {
     {
-        "Square",
-        offsetof(struct data_model_index, square) / sizeof(uint32_t),
-        sizeof(data_model_index->square) / sizeof(uint32_t),
+        "Cube",
+        offsetof(struct data_model_index, cube) / sizeof(uint32_t),
+        sizeof(data_model_index->cube) / sizeof(uint32_t),
         0,
     },
 };
diff -bNur 0003index-buffer/libdata.c 0004cube/libdata.c
--- 0003index-buffer/libdata.c	2019-03-03 15:08:52.160918059 -0600
+++ 0004cube/libdata.c	2019-03-03 15:08:52.164917190 -0600
@@ -192,6 +192,7 @@
 
 inline static void handle_input(double this_frame, material_0_ubo_t *ubo_0)
 {
+        float diagnal2 = 1;
         bool need_lookat = false;
 
 #define GET_KEY(key) glfwGetKey(data_window, (key))
@@ -200,8 +201,10 @@
         {
                 double dist = 1.5 * (GET_KEY2(GLFW_KEY_W, GLFW_KEY_UP) ? this_frame - previous_frame
                                                                        : previous_frame - this_frame);
-                ubo_0->viewPos[0] += sinf(center_dir) * dist;
-                ubo_0->viewPos[2] += cosf(center_dir) * dist;
+                if (GET_KEY(GLFW_KEY_R) ^ GET_KEY(GLFW_KEY_V))
+                        diagnal2 = 0.70710678119f;
+                ubo_0->viewPos[0] += sinf(center_dir) * dist * diagnal2;
+                ubo_0->viewPos[2] += cosf(center_dir) * dist * diagnal2;
                 need_lookat = true;
         }
 
@@ -212,6 +215,14 @@
                 need_lookat = true;
         }
 
+        if (GET_KEY(GLFW_KEY_R) ^ GET_KEY(GLFW_KEY_V))
+        {
+                double dist = 1.5 * (GET_KEY(GLFW_KEY_R) ? this_frame - previous_frame
+                                                         : previous_frame - this_frame);
+                ubo_0->viewPos[1] += dist * diagnal2;
+                need_lookat = true;
+        }
+
         if (need_lookat)
                 update_vp(ubo_0);
 }
